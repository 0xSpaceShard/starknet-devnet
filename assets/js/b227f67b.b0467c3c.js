"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1861],{2401:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=t(4848),s=t(8453);const r={sidebar_position:1},o="Intro",a={id:"intro",title:"Intro",description:"- Devnet should not be used as a replacement for the official testnet. After testing on Devnet, be sure to test on testnet (alpha-sepolia)!",source:"@site/versioned_docs/version-0.6.1/intro.md",sourceDirName:".",slug:"/intro",permalink:"/starknet-devnet/docs/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/0xSpaceShard/starknet-devnet/blob/master/website/versioned_docs/version-0.6.1/intro.md",tags:[],version:"0.6.1",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",next:{title:"Running",permalink:"/starknet-devnet/docs/category/running"}},l={},c=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"intro",children:"Intro"}),"\n",(0,i.jsx)(n.admonition,{title:"Difference disclaimer",type:"danger",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Devnet should not be used as a replacement for the official testnet. After testing on Devnet, be sure to test on testnet (alpha-sepolia)!"}),"\n",(0,i.jsxs)(n.li,{children:["Devnet does not organize state data into Merkle-Patricia tries or similar tree-like structures, so:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Calling the ",(0,i.jsx)(n.code,{children:"starknet_getStorageProof"})," RPC method shall always result in ",(0,i.jsx)(n.code,{children:"STORAGE_PROOF_NOT_SUPPORTED"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Block roots are set to 0."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["The pre-confirmed block is equivalent to the old pending block, except that its transactions are not ",(0,i.jsx)(n.code,{children:"ACCEPTED_ON_L2"})," but ",(0,i.jsx)(n.code,{children:"PRE_CONFIRMED"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["By default, a new block is mined for each new transaction.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This can be modified by directing all new transactions into a pre-confirmed block, and at some point triggering block creation."}),"\n",(0,i.jsx)(n.li,{children:"Transactions in a pre-confirmed block cannot be replaced by sending a transaction with a higher free from the same account."}),"\n",(0,i.jsxs)(n.li,{children:["Read more about transitioning a transaction ",(0,i.jsxs)(n.a,{href:"./blocks#creating-blocks-on-demand",children:["from ",(0,i.jsx)(n.code,{children:"PRE_CONFIRMED"})," to ",(0,i.jsx)(n.code,{children:"ACCEPTED_ON_L2"})]}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Block hashes on devnet differ from mainnet because some mainnet block fields are unavailable to devnet, resulting in different hash outputs despite using the same hashing algorithm."}),"\n",(0,i.jsxs)(n.li,{children:["Transactions are never automatically ",(0,i.jsx)(n.code,{children:"ACCEPTED_ON_L1"}),", unless the user performs an action.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Read more about transitioning a transaction ",(0,i.jsxs)(n.a,{href:"./blocks#accepting-blocks-on-l1",children:["from ",(0,i.jsx)(n.code,{children:"ACCEPTED_ON_L2"})," to ",(0,i.jsx)(n.code,{children:"ACCEPTED_ON_L1"})]}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RECEIVED"})," and ",(0,i.jsx)(n.code,{children:"CANDIDATE"})," statuses are not used in Devnet."]}),"\n"]})}),"\n",(0,i.jsxs)(n.p,{children:["You may now proceed with ",(0,i.jsx)(n.a,{href:"./running/install",children:"running Devnet"})," and checking out the multitude of features listed in the sidebar on the left."]}),"\n",(0,i.jsx)(n.h1,{id:"limits",children:"Limits"}),"\n",(0,i.jsxs)(n.p,{children:["As mentioned ",(0,i.jsx)(n.a,{href:"https://docs.starknet.io/tools/limits-and-triggers/",children:"here"}),', "Starknet currently has a number of limits in place in order to keep the network stable and optimized for the best performance." Devnet uses the limits defined on that page and, for block-level limits, values defined ',(0,i.jsx)(n.a,{href:"https://github.com/0xSpaceShard/starknet-devnet/blob/main/crates/starknet-devnet-core/src/utils.rs",children:"here (provided by the Blockifier team)"}),". The block-level limits are considered only when executing transactions, not when constructing the blocks themselves. I.e. if a transaction's usage of a resource exceeds its defined block-level limit, it will be reverted; but if the cumulative usage of all transactions in a block of one resource exceeds the block limit, the block will still be generated."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);