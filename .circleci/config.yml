# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

aliases:
  - &on_main
    context: spaceshard
    filters:
      branches:
        only:
          - main

  - &on_main_after_test_and_build
    <<: *on_main
    requires:
      - build-and-test
      - build-binaries

  - &linux_build
    machine:
      image: ubuntu-2204:2024.01.2
    resource_class: arm.large
    environment:
      COMPILER_ARCHIVE: cross-aarch64-unknown-linux-gnu.tar.gz

executors:
  unknown-linux-gnu:
    <<: *linux_build

  unknown-linux-musl:
    <<: *linux_build

  apple-darwin:
    macos:
      xcode: 15.3.0
    environment:
      COMPILER_ARCHIVE: cross-x86_64-apple-darwin.tar.gz

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-and-test:
    parameters:
      cargo_cache_key:
        type: string
    docker:
      - image: cimg/rust:1.74.0
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - << parameters.cargo_cache_key >>
      - run:
          # this step doesn't need to be cached, it's relatively fast (15s on Docker/X-Large)
          name: Install nightly
          command: rustup install nightly
      - run:
          name: Install foundry
          command: ./scripts/install_foundry.sh
      - run:
          name: Build
          command: cargo build --release
      - run:
          name: Clippy check
          command: ./scripts/clippy_check.sh
      - run:
          name: Format check
          command: cargo +nightly fmt --all --check
      - save_cache:
          # Caching dependencies for future use
          # Build and Clippy steps generate their own target artifacts
          # Test also generates, but significantly more
          # Compromise: saving before Test
          paths:
            - /home/circleci/.cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/release/.fingerprint
            - target/release/build
            - target/release/deps
          key: << parameters.cargo_cache_key >>
      - run:
          name: Unit tests
          command: cargo test --jobs 7 --lib --bins --no-fail-fast
      - run:
          name: Integration tests
          # fails if jobs not limited; read more in https://github.com/0xSpaceShard/starknet-devnet-rs/issues/378
          command: cargo test --jobs 3 --test '*' --no-fail-fast

  build-binaries:
    parameters:
      arch:
        type: string
      platform:
        type: executor
      target_triplet:
        type: string
      archive_path:
        type: string

    executor: << parameters.platform >>

    environment:
      BIN_DIR: target/<< parameters.target_triplet >>/release

      # For validating Docker build
      REMOTE: ""

      # For Docker image naming
      ARCH_SUFFIX: -<< parameters.arch >>

    steps:
      - checkout
      - run:
          name: Install Rust
          # CIRCLE_JOB contains job name, which we define to be the target triplet
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain=1.74.0
      - run: rustup target add << parameters.target_triplet >>
      - run:
          name: Install Cross
          command: |
            # curl -SsL https://github.com/cross-rs/cross/releases/download/v0.2.5/${COMPILER_ARCHIVE} |
            #   tar -xvz -C /tmp
            cargo install cross --git https://github.com/cross-rs/cross
      - run:
          name: Build
          command: cross build --release --target=<< parameters.target_triplet >>
          # command: /tmp/cross build --release --target=<< parameters.target_triplet >>
      - run:
          name: Archive and compress artifact
          command: tar -czvf << parameters.archive_path >> --directory ${BIN_DIR} starknet-devnet
      - store_artifacts: # to later include them in github release
          path: << parameters.archive_path >>
      - when:
          condition:
            or:
              - equal:
                  [<< parameters.target_triplet >>, x86_64-unknown-linux-gnu]
              - equal:
                  [<< parameters.target_triplet >>, aarch64-unknown-linux-gnu]
          steps:
            - run:
                name: Build Docker image
                command: ./docker/image_build.sh

  publish:
    docker:
      - image: cimg/rust:1.74.0
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: docker23
      - run:
          name: Publish new versions to crates.io
          command: ./scripts/publish_cratesio_new_versions.sh
      - run:
          name: Create tags and push joint image manifests
          command: ./docker/tag_images_and_create_joint_image_manifests.sh

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  main:
    jobs:
      - build-and-test:
          cargo_cache_key: cargo-cache-{{ checksum "Cargo.lock" }}-{{ checksum "rust-toolchain.toml" }}-v1

      - build-binaries:
          # TODO <<: *on_main
          matrix:
            parameters:
              arch: [x86_64, aarch64]
              platform: [unknown-linux-gnu] # TODO, unknown-linux-musl, apple-darwin]
          target_triplet: << matrix.arch >>-<< matrix.platform >>
          archive_path: starknet-devnet-<< matrix.arch >>-<< matrix.platform >>.tar.gz

      - publish:
          <<: *on_main_after_test_and_build
