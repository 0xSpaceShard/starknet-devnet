# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

aliases:
  - &on_main
    context: spaceshard
    filters:
      branches:
        only:
          - main

  - &on_main_after_test_and_build
    <<: *on_main
    requires:
      - build-and-test
      - image-build-amd
      - image-build-arm
      - binary-build

  - &linux_build
    machine:
      image: ubuntu-2204:2024.01.2
    resource_class: large
    environment:
      COMPILER_ARCHIVE: cross-x86_64-unknown-linux-gnu.tar.gz

executors:
  unknown-linux-gnu:
    <<: *linux_build

  unknown-linux-musl:
    <<: *linux_build

  apple-darwin:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1
    environment:
      COMPILER_ARCHIVE: cross-x86_64-apple-darwin.tar.gz

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-and-test:
    machine: true
    resource_class: spaceshard/ax41
    steps:
      - checkout
      - run:
          name: Load cache
          command: .circleci/scripts/cache.sh load
      - run:
          name: Install nightly-2024-07-08
          command: rustup install nightly-2024-07-08
      - run:
          name: Install foundry
          command: ./scripts/install_foundry.sh
      - run:
          name: Verify lockfile
          command: cargo update -w --locked
      - run:
          # Despite later running cargo build --release, this step is executed on all targets, so might discover testing code issues
          name: Check
          command: cargo check --workspace --all-targets
      - run:
          name: Clippy check
          command: ./scripts/clippy_check.sh
      - run:
          name: Format check
          command: ./scripts/format_check.sh
      - run:
          name: Code spell check
          command: ./scripts/check_spelling.sh
      - run:
          name: Build in release mode (for BackgroundDevnet)
          command: cargo build --release
      - run:
          name: Save cache
          command: .circleci/scripts/cache.sh save
      - run:
          name: Cleanup old cache
          command: .circleci/scripts/cache.sh cleanup
      - run:
          name: Test
          command: RUST_BACKTRACE=full cargo test --no-fail-fast

  binary-build:
    parameters:
      arch:
        type: string
      platform:
        type: executor
      target_triplet:
        type: string
      archive_path:
        type: string

    executor: << parameters.platform >>

    steps:
      - checkout
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs |
              sh -s -- -y --default-toolchain=1.83.0
      - run:
          name: Compile binary
          command: ./scripts/compile_binary.sh << parameters.target_triplet >>
      - run:
          name: Archive and compress binary artifact # only the file, not the whole dir structure
          command: tar -czvf << parameters.archive_path >> --directory target/<< parameters.target_triplet >>/release starknet-devnet
      - store_artifacts: # to later include them in github release
          path: << parameters.archive_path >>

  image-build-amd:
    docker:
      - image: cimg/base:2021.04
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: docker23
      - run:
          name: Build amd images
          command: ./docker/image_build.sh
          environment:
            ARCH_SUFFIX: -amd

  image-build-arm:
    machine:
      image: ubuntu-2204:2024.01.2
    resource_class: arm.large
    steps:
      - checkout
      - run:
          name: Build arm images
          command: ./docker/image_build.sh
          environment:
            ARCH_SUFFIX: -arm

  publish:
    docker:
      - image: cimg/rust:1.83.0-node
    resource_class: xlarge
    steps:
      - checkout
      - setup_remote_docker:
          version: docker23
      - add_ssh_keys:
          # needed for pushing to gh-pages
          fingerprints:
            - "SHA256:y2r0YUdeS8k6XSOFmgNs4wcTJFv+PIgkY0Yz+af6NSU"
      - run:
          name: Publish new versions to crates.io
          command: ./scripts/publish_cratesio_new_versions.sh
      - run:
          name: Create tags and push joint image manifests
          command: ./docker/tag_images_and_create_joint_image_manifests.sh
      - run:
          name: Publish docs
          command: ./scripts/publish_docs.sh

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-test-maybe-publish:
    jobs:
      - build-and-test
      - binary-build:
          <<: *on_main
          matrix:
            parameters:
              arch: [x86_64, aarch64]
              platform: [unknown-linux-gnu, unknown-linux-musl, apple-darwin]
          target_triplet: << matrix.arch >>-<< matrix.platform >>
          archive_path: starknet-devnet-<< matrix.arch >>-<< matrix.platform >>.tar.gz
      - image-build-amd:
          <<: *on_main
      - image-build-arm:
          <<: *on_main
      - publish:
          <<: *on_main_after_test_and_build
