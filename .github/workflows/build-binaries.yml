name: Build Binaries

on:
  workflow_run:
    workflows: ["Build and Test"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: false

jobs:
  binary-build:
    name: Binary - ${{ matrix.target }}
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            artifact-name: starknet-devnet-x86_64-unknown-linux-gnu
          
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            artifact-name: starknet-devnet-aarch64-unknown-linux-gnu
          
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            artifact-name: starknet-devnet-x86_64-unknown-linux-musl
          
          - os: macos-14
            target: x86_64-apple-darwin
            artifact-name: starknet-devnet-x86_64-apple-darwin
          
          - os: macos-14
            target: aarch64-apple-darwin
            artifact-name: starknet-devnet-aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load common configuration
        id: config
        uses: ./.github/actions/load-config

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.config.outputs.rust_stable_version }}
          target: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: binary-${{ matrix.target }}
          cache-on-failure: true

      - name: Install cross-compilation dependencies for Linux targets
        if: runner.os == 'Linux' && contains(matrix.target, '-unknown-linux-')
        run: |
          if [[ "${{ matrix.target }}" == *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y musl-tools
          fi
          if [[ "${{ matrix.target }}" == "aarch64-"* ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Setup for AArch64 Linux target
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
          
      - name: Add target and compile binary
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target=${{ matrix.target }} --bin starknet-devnet

      - name: Archive binary
        run: tar -czvf ${{ matrix.artifact-name }}.tar.gz --directory target/${{ matrix.target }}/release starknet-devnet

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-name }}.tar.gz
          retention-days: 14