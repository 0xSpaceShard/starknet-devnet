{
  "openrpc": "1.0.0-rc1",
  "info": {
    "version": "0.1.0",
    "title": "Devnet API",
    "license": {}
  },
  "servers": [],
  "methods": [
    {
      "name": "devnet_impersonateAccount",
      "summary": "Impersonate an account",
      "params": [
        {
          "name": "account_address",
          "description": "The address of the contract to be impersonated",
          "required": true,
          "schema": {
            "title": "Address",
            "$ref": "#/components/schemas/ADDRESS"
          }
        }
      ],
      "result": {},
      "errors": [
        {
          "$ref": "#/components/errors/INVALID_REQUEST"
        }
      ]
    },
    {
      "name": "devnet_stopImpersonateAccount",
      "summary": "Stop impersonating an account",
      "params": [
        {
          "name": "account_address",
          "description": "The address of the contract which is impersonated",
          "required": true,
          "schema": {
            "title": "Address",
            "$ref": "#/components/schemas/ADDRESS"
          }
        }
      ],
      "result": {},
      "errors": []
    },
    {
      "name": "devnet_autoImpersonate",
      "summary": "Automatic account impersonation",
      "params": [],
      "result": {},
      "errors": [
        {
          "$ref": "#/components/errors/INVALID_REQUEST"
        }
      ]
    },
    {
      "name": "devnet_stopAutoImpersonate",
      "summary": "Stop automatic account impersonation",
      "params": [],
      "result": {},
      "errors": [
        {
          "$ref": "#/components/errors/INVALID_REQUEST"
        }
      ]
    },
    {
      "name": "devnet_dump",
      "summary": "Dump current state to a file",
      "params": [
        {
          "name": "path",
          "description": "Path to a file to dump the state to",
          "required": false,
          "schema": {
            "title": "Path",
            "type": "string"
          }
        }
      ],
      "result": {},
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_load",
      "summary": "Load blockchain state from file",
      "params": [
        {
          "name": "path",
          "description": "Path to a file with dumped state",
          "required": true,
          "schema": {
            "title": "Path",
            "type": "string"
          }
        }
      ],
      "result": {},
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_postmanLoad",
      "summary": "Load L1 messaging contract",
      "params": [
        {
          "name": "network_url",
          "description": "URL of running L1 node",
          "required": true,
          "schema": {
            "title": "Network URL",
            "type": "string"
          }
        },
        {
          "name": "address",
          "description": "Address of contract deployed on L1 node",
          "required": false,
          "schema": {
            "title": "Contract address",
            "type": "string"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The result of L1 contract loading",
        "schema": {
          "type": "object",
          "properties": {
            "messaging_contract_address": {
              "title": "The address of the messaging contract",
              "schema": {
                "title": "Contract address",
                "type": "string"
              }
            }
          },
          "required": ["messaging_contract_address"]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_postmanFlush",
      "summary": "Send/receive all messages from/to L1",
      "params": [
        {
          "name": "dry_run",
          "description": "See results of the flush without actually sending/receiving messages",
          "required": false,
          "schema": {
            "title": "Dry run",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Sent/received messages",
        "schema": {
          "type": "object",
          "properties": {
            "messages_to_l1": {
              "type": "array",
              "title": "Messages to L1",
              "items": {
                "$ref": "#/components/schemas/MSG_TO_L1"
              }
            },
            "messages_to_l2": {
              "type": "array",
              "title": "Messages to L2",
              "items": {
                "$ref": "#/components/schemas/MSG_TO_L2"
              }
            },
            "generated_l2_transactions": {
              "type": "array",
              "title": "Transaction hashes",
              "items": {
                "$ref": "#/components/schemas/FELT"
              }
            },
            "l1_provider": {
              "title": "L1 provider",
              "description": "The provider of the L1 node",
              "type": "string"
            }
          },
          "required": [
            "messages_to_l1",
            "messages_to_l2",
            "generated_l2_transactions",
            "l1_provider"
          ]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_postmanSendMessageToL2",
      "summary": "Send message L1 to L2",
      "params": [
        {
          "l2_contract_address": {
            "description": "The address of the L2 contract receiving the message",
            "$ref": "#/components/schemas/ADDRESS"
          },
          "entry_point_selector": {
            "title": "Selector",
            "description": "The selector of the function in the l2 contract to invoke",
            "$ref": "#/components/schemas/FELT"
          },
          "l1_contract_address": {
            "description": "The address of the L1 contract sending the message",
            "$ref": "#/components/schemas/ADDRESS"
          },
          "payload": {
            "description": "The payload of the message",
            "title": "Payload",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FELT"
            }
          },
          "paid_fee_on_l1": {
            "title": "Paid fee on L1",
            "$ref": "#/components/schemas/FELT"
          },
          "nonce": {
            "title": "Nonce",
            "$ref": "#/components/schemas/FELT"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The result of L1 contract loading",
        "schema": {
          "type": "object",
          "properties": {
            "transaction_hash": {
              "description": "Transaction hash of executed message",
              "$ref": "#/components/schemas/FELT"
            }
          },
          "required": ["transaction_hash"]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_postmanConsumeMessageFromL2",
      "summary": "Send message L2 to L1",
      "params": [
        {
          "from_address": {
            "description": "The address of the L2 contract sending the message",
            "$ref": "#/components/schemas/FELT"
          },
          "to_address": {
            "title": "To address",
            "description": "The target L1 address the message is sent to",
            "$ref": "#/components/schemas/FELT"
          },
          "payload": {
            "description": "The payload of the message",
            "title": "Payload",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FELT"
            }
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The result of L1 contract loading",
        "schema": {
          "type": "object",
          "properties": {
            "message_hash": {
              "description": "Transaction hash of executed message",
              "title": "Message hash",
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{64}$"
            }
          },
          "required": ["message_hash"]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_createBlock",
      "summary": "Create block",
      "params": [],
      "result": {
        "name": "result",
        "description": "New block hash",
        "schema": {
          "type": "object",
          "properties": {
            "block_hash": {
              "description": "Block hash",
              "$ref": "#/components/schemas/FELT"
            }
          },
          "required": ["block_hash"]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_abortBlocks",
      "summary": "Abort blocks",
      "params": [
        {
          "name": "starting_block_id",
          "description": "The hash of the requested block, or number (height) of the requested block, or a block tag, being the first block to be aborted.",
          "required": true,
          "schema": {
            "title": "Block id",
            "$ref": "#/components/schemas/BLOCK_ID"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Arary of aborted blocks hashes.",
        "schema": {
          "type": "object",
          "properties": {
            "aborted": {
              "description": "Aborted blocks hashes",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FELT"
              }
            }
          },
          "required": ["aborted"]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_setGasPrice",
      "summary": "Set gas price",
      "params": [
        {
          "gas_price_wei": {
            "title": "L1 Gas price in WEI",
            "$ref": "#/components/schemas/u128"
          },
          "data_gas_price_wei": {
            "title": "L1 Data gas price in WEI",
            "$ref": "#/components/schemas/u128"
          },
          "gas_price_fri": {
            "title": "L1 Gas price in FRI",
            "$ref": "#/components/schemas/u128"
          },
          "data_gas_price_fri": {
            "title": "L1 Data gas price in FRI",
            "$ref": "#/components/schemas/u128"
          },
          "l2_gas_price_wei": {
            "title": "L2 Gas price in WEI",
            "$ref": "#/components/schemas/u128"
          },
          "l2_gas_price_fri": {
            "title": "L2 Gas price in FRI",
            "$ref": "#/components/schemas/u128"
          },
          "generate_block": {
            "title": "Generate block",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "The new gas prices",
        "schema": {
          "type": "object",
          "properties": {
            "gas_price_wei": {
              "title": "Gas price in WEI",
              "$ref": "#/components/schemas/u128"
            },
            "data_gas_price_wei": {
              "title": "L1 Data gas price in WEI",
              "$ref": "#/components/schemas/u128"
            },
            "gas_price_fri": {
              "title": "L1 Gas price in FRI",
              "$ref": "#/components/schemas/u128"
            },
            "data_gas_price_fri": {
              "title": "L1 Data gas price in FRI",
              "$ref": "#/components/schemas/u128"
            },
            "l2_gas_price_wei": {
              "title": "L2 Gas price in WEI",
              "$ref": "#/components/schemas/u128"
            },
            "l2_gas_price_fri": {
              "title": "L2 Gas price in FRI",
              "$ref": "#/components/schemas/u128"
            }
          },
          "required": [
            "gas_price_wei",
            "data_gas_price_wei",
            "gas_price_fri",
            "data_gas_price_fri"
          ]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_restart",
      "summary": "Restarts devnet state",
      "params": [],
      "result": {
        "name": "result",
        "description": "New block hash",
        "schema": {
          "type": "object"
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_setTime",
      "summary": "Sets block.timestamp",
      "params": [
        {
          "time": {
            "title": "New block timestamp",
            "required": true,
            "$ref": "#/components/schemas/u64"
          },
          "generate_block": {
            "title": "Generate block",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "New block timestamp",
        "schema": {
          "type": "object",
          "properties": {
            "block_timestamp": {
              "title": "New block timestamp",
              "$ref": "#/components/schemas/u64"
            },
            "block_hash": {
              "description": "Block hash",
              "$ref": "#/components/schemas/FELT"
            }
          },
          "required": ["block_timestamp", "block_hash"]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_increaseTime",
      "summary": "Increases block.timestamp",
      "params": [
        {
          "time": {
            "title": "Timestamp shift",
            "required": true,
            "$ref": "#/components/schemas/u64"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "New block timestamp",
        "schema": {
          "type": "object",
          "properties": {
            "timestamp_increased)by": {
              "title": "Timestamp shift",
              "$ref": "#/components/schemas/u64"
            },
            "block_hash": {
              "description": "Block hash",
              "$ref": "#/components/schemas/FELT"
            }
          },
          "required": ["block_timestamp", "block_hash"]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_getPredeployedAccounts",
      "summary": "Return predeployed accounts",
      "params": [
        {
          "name": "with_balance",
          "description": "Return balance of each predeployed account.",
          "required": false,
          "schema": {
            "title": "With balance",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Predeployed accounts data.",
        "schema": {
          "type": "object",
          "properties": {
            "initial_balance": {
              "type": "string",
              "title": "Initial balance"
            },
            "address": {
              "$ref": "#/components/schemas/ADDRESS",
              "title": "Account address"
            },
            "public_key": {
              "$ref": "#/components/schemas/FELT",
              "title": "Account public key"
            },
            "private_key": {
              "$ref": "#/components/schemas/FELT",
              "title": "Account private key"
            },
            "balance": {
              "$ref": "#/components/schemas/ACCOUNT_BALANCES",
              "title": "Account balances"
            }
          },
          "required": [
            "initial_balance",
            "address",
            "public_key",
            "private_key"
          ]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_getAccountBalance",
      "summary": "Return account balance",
      "params": [
        {
          "name": "address",
          "description": "Account's balance.",
          "required": true,
          "schema": {
            "title": "Account address",
            "$ref": "#/components/schemas/ADDRESS"
          },
          "unit": {
            "title": "Amount unit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PRICE_UNIT"
            }
          },
          "block_tag": {
            "title": "Block tag",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BLOCK_TAG"
            }
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Predeployed accounts data.",
        "schema": {
          "type": "object",
          "$ref": "#/components/schemas/ACCOUNT_BALANCE"
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_mint",
      "summary": "Mints tokens to account.",
      "params": [
        {
          "name": "address",
          "description": "Account's balance to be increased.",
          "required": true,
          "schema": {
            "title": "Account address",
            "$ref": "#/components/schemas/ADDRESS"
          },
          "amount": {
            "title": "Amount",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          "unit": {
            "title": "Amount unit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PRICE_UNIT"
            }
          }
        }
      ],
      "result": {
        "name": "result",
        "description": "Predeployed accounts data.",
        "schema": {
          "type": "object",
          "properties": {
            "new_balance": {
              "title": "New balance",
              "schema": {
                "type": "string"
              }
            },
            "unit": {
              "title": "Amount unit",
              "schema": {
                "$ref": "#/components/schemas/PRICE_UNIT"
              }
            },
            "tx_hash": {
              "title": "Transaction hash",
              "schema": {
                "$ref": "#/components/schemas/TXN_HASH"
              }
            }
          },
          "required": ["new_balance", "unit", "tx_hash"]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    },
    {
      "name": "devnet_getConfig",
      "summary": "Returns devnet config",
      "params": [],
      "result": {
        "name": "result",
        "description": "Devnet config",
        "schema": {
          "type": "object",
          "properties": {
            "server_config": {
              "title": "Server config",
              "schema": {
                "type": "object",
                "properties": {
                  "host": {
                    "title": "Host",
                    "type": "string"
                  },
                  "port": {
                    "title": "Port",
                    "type": "integer"
                  },
                  "timeout": {
                    "title": "Timeout",
                    "type": "integer"
                  },
                  "request_body_size_limit": {
                    "title": "Request body size limit",
                    "type": "integer"
                  }
                },
                "required": [
                  "host",
                  "port",
                  "timeout",
                  "request_body_size_limit"
                ]
              }
            },
            "seed": {
              "title": "Seed",
              "type": "integer"
            },
            "total_accounts": {
              "title": "Total accounts",
              "type": "integer"
            },
            "account_contract_class_hash": {
              "title": "Account contract class hash",
              "$ref": "#/components/schemas/FELT"
            },
            "predeployed_accounts_initial_balance": {
              "title": "Predeployed accounts initial balance",
              "type": "string"
            },
            "start_time": {
              "title": "Start time",
              "type": "integer"
            },
            "gas_price_wei": {
              "title": "L1 Gas price in WEI",
              "$ref": "#/components/schemas/u128"
            },
            "data_gas_price_wei": {
              "title": "L1 Data gas price in WEI",
              "$ref": "#/components/schemas/u128"
            },
            "gas_price_fri": {
              "title": "L1 Gas price in FRI",
              "$ref": "#/components/schemas/u128"
            },
            "data_gas_price_fri": {
              "title": "L1 Data gas price in FRI",
              "$ref": "#/components/schemas/u128"
            },
            "l2_gas_price_wei": {
              "title": "L2 Gas price in WEI",
              "$ref": "#/components/schemas/u128"
            },
            "l2_gas_price_fri": {
              "title": "L2 Gas price in FRI",
              "$ref": "#/components/schemas/u128"
            },
            "chain_id": {
              "title": "Chain id",
              "type": "string"
            },
            "dump_on": {
              "title": "Dump on",
              "type": "string"
            },
            "dump_path": {
              "title": "Dump path",
              "type": "string"
            },
            "block_generation_on": {
              "title": "Block generation on",
              "type": "string"
            },
            "lite_mode": {
              "title": "Lite mode",
              "type": "boolean"
            },
            "state_archive": {
              "title": "State archive capacity mode",
              "type": "string"
            },
            "fork_config": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "block_number": {
                  "type": "integer"
                }
              }
            }
          },
          "required": [
            "seed",
            "total_accounts",
            "account_contract_class_hash",
            "predeployed_accounts_initial_balance",
            "start_time",
            "gas_price_fri",
            "gas_price_wei",
            "data_gas_price_fri",
            "data_gas_price_wei",
            "chain_id",
            "block_generation_on",
            "lite_mode",
            "state_archive",
            "server_config"
          ]
        }
      },
      "errors": [
        {
          "$ref": "#/components/errors/WILDCARD_ERROR"
        }
      ]
    }
  ],
  "components": {
    "contentDescriptors": {},
    "schemas": {
      "ACCOUNT_BALANCE": {
        "title": "Account balance",
        "type": "object",
        "properties": {
          "amount": {
            "title": "Amount",
            "type": "string"
          },
          "unit": {
            "title": "Amount unit",
            "$ref": "#/components/schemas/PRICE_UNIT"
          }
        },
        "required": ["amount", "unit"]
      },
      "ACCOUNT_BALANCES": {
        "title": "Account balances",
        "type": "object",
        "properties": {
          "eth": {
            "title": "ETH balance",
            "$ref": "#/components/schemas/ACCOUNT_BALANCE"
          },
          "strk": {
            "title": "STRK balance",
            "$ref": "#/components/schemas/ACCOUNT_BALANCE"
          }
        }
      },
      "BLOCK_ID": {
        "title": "Block id",
        "description": "Block hash, number or tag",
        "oneOf": [
          {
            "title": "Block hash",
            "type": "object",
            "properties": {
              "block_hash": {
                "title": "Block hash",
                "$ref": "#/components/schemas/BLOCK_HASH"
              }
            },
            "required": ["block_hash"]
          },
          {
            "title": "Block number",
            "type": "object",
            "properties": {
              "block_number": {
                "title": "Block number",
                "$ref": "#/components/schemas/BLOCK_NUMBER"
              }
            },
            "required": ["block_number"]
          },
          {
            "title": "Block tag",
            "$ref": "#/components/schemas/BLOCK_TAG"
          }
        ]
      },
      "BLOCK_TAG": {
        "title": "Block tag",
        "type": "string",
        "description": "A tag specifying a dynamic reference to a block",
        "enum": ["latest", "pending"]
      },
      "u64": {
        "type": "string",
        "title": "u64",
        "description": "64 bit integers, represented by hex string of length at most 16",
        "pattern": "^0x(0|[a-fA-F1-9]{1}[a-fA-F0-9]{0,15})$"
      },
      "u128": {
        "type": "string",
        "title": "u128",
        "description": "64 bit integers, represented by hex string of length at most 32",
        "pattern": "^0x(0|[a-fA-F1-9]{1}[a-fA-F0-9]{0,31})$"
      },
      "CHAIN_ID": {
        "title": "Chain id",
        "description": "StarkNet chain id, given in hex representation.",
        "type": "string",
        "pattern": "^0x[a-fA-F0-9]+$"
      },
      "ADDRESS": {
        "title": "Address",
        "$ref": "#/components/schemas/FELT"
      },
      "ETH_ADDRESS": {
        "title": "Ethereum address",
        "type": "string",
        "$comment": "An ethereum address",
        "description": "an ethereum address represented as 40 hex digits",
        "pattern": "^0x[a-fA-F0-9]{40}$"
      },
      "TXN_HASH": {
        "$ref": "#/components/schemas/FELT",
        "description": "The transaction hash, as assigned in StarkNet",
        "title": "Transaction hash"
      },
      "FELT": {
        "type": "string",
        "title": "Field element",
        "description": "A field element. represented by at most 63 hex digits",
        "pattern": "^0x(0|[a-fA-F1-9]{1}[a-fA-F0-9]{0,61})$"
      },
      "BLOCK_NUMBER": {
        "title": "Block number",
        "description": "The block's number (its height)",
        "type": "integer",
        "minimum": 0
      },
      "BLOCK_HASH": {
        "title": "Block hash",
        "$ref": "#/components/schemas/FELT"
      },
      "MSG_TO_L1": {
        "title": "Message to L1",
        "type": "object",
        "properties": {
          "from_address": {
            "description": "The address of the L2 contract sending the message",
            "$ref": "#/components/schemas/FELT"
          },
          "to_address": {
            "title": "To address",
            "description": "The target L1 address the message is sent to",
            "$ref": "#/components/schemas/FELT"
          },
          "payload": {
            "description": "The payload of the message",
            "title": "Payload",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FELT"
            }
          }
        },
        "required": ["from_address", "to_address", "payload"]
      },
      "MSG_TO_L2": {
        "title": "Message to L2",
        "type": "object",
        "properties": {
          "l2_contract_address": {
            "description": "The address of the L2 contract receiving the message",
            "$ref": "#/components/schemas/ADDRESS"
          },
          "entry_point_selector": {
            "title": "Selector",
            "description": "The selector of the function in the l2 contract to invoke",
            "$ref": "#/components/schemas/FELT"
          },
          "l1_contract_address": {
            "description": "The address of the L1 contract sending the message",
            "$ref": "#/components/schemas/ADDRESS"
          },
          "payload": {
            "description": "The payload of the message",
            "title": "Payload",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FELT"
            }
          },
          "paid_fee_on_l1": {
            "title": "Paid fee on L1",
            "$ref": "#/components/schemas/FELT"
          },
          "nonce": {
            "title": "Nonce",
            "$ref": "#/components/schemas/FELT"
          }
        },
        "required": [
          "l2_contract_address",
          "entry_point_selector",
          "l1_contract_address",
          "payload",
          "paid_fee_on_l1",
          "nonce"
        ]
      },
      "MSG_FROM_L1": {
        "title": "Message from L1",
        "type": "object",
        "properties": {
          "from_address": {
            "description": "The address of the L1 contract sending the message",
            "$ref": "#/components/schemas/ETH_ADDRESS"
          },
          "to_address": {
            "title": "To address",
            "description": "The target L2 address the message is sent to",
            "$ref": "#/components/schemas/ADDRESS"
          },
          "entry_point_selector": {
            "title": "Selector",
            "description": "The selector of the l1_handler in invoke in the target contract",
            "$ref": "#/components/schemas/FELT"
          },
          "payload": {
            "description": "The payload of the message",
            "title": "Payload",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FELT"
            }
          }
        },
        "required": [
          "from_address",
          "to_address",
          "payload",
          "entry_point_selector"
        ]
      },
      "PRICE_UNIT": {
        "title": "price unit",
        "type": "string",
        "enum": ["WEI", "FRI"]
      }
    },
    "errors": {
      "FAILED_TO_RECEIVE_TXN": {
        "code": 1,
        "message": "Failed to write transaction"
      },
      "INVALID_REQUEST": {
        "code": -32600,
        "message": "Invalid request"
      },
      "WILDCARD_ERROR": {
        "code": -1,
        "message": "An error occurred"
      }
    }
  }
}
